// Equivalent terms for "SceneVis" kernel
// ================================================

RULE 1 - near is a distance
  if:  hq-1 -lex-  near
            -hq--> obj-1
then: ako-1 -lex-  distance
            -ako-> hq-1

RULE 2 - a nearness is a distance
  if: ako-1 -lex-  nearness
            -ako-> hq-1
then: ako-2 -lex-  distance
            -ako-> hq-1

RULE 3 - a distance is a nearness
  if: ako-1 -lex-  distance
            -ako-> hq-1
then: ako-2 -lex-  nearness
            -ako-> hq-1

RULE 4 - if something is close then it is near
  if: hq-1 -lex-  close
           -hq--> obj-1
then: hq-2 -lex-  near
           -hq--> obj-1

RULE 5 - if something is not close then it is not near
  if: hq-1 -lex-  close
           -neg-  1
           -hq--> obj-1
then: hq-2 -lex-  near
           -neg-  1
           -hq--> obj-1

// ================================================

RULE 6 - large is a size
  if:  hq-1 -lex-  large
            -hq--> obj-1
then: ako-1 -lex-  size
            -ako-> hq-1

RULE 7 - a largeness is a size
  if: ako-1 -lex-  largeness
            -ako-> hq-1
then: ako-2 -lex-  size
            -ako-> hq-1

RULE 8 - a size is a largeness
  if: ako-1 -lex-  size
            -ako-> hq-1
then: ako-2 -lex-  largeness
            -ako-> hq-1

RULE 9 - if something is big then it is large
  if: hq-1 -lex-  big
           -hq--> obj-1
then: hq-2 -lex-  large
           -hq--> obj-1

RULE 10 - if something is not big then it is not large
  if: hq-1 -lex-  big
           -neg-  1
           -hq--> obj-1
then: hq-2 -lex-  large
           -neg-  1
           -hq--> obj-1

// ================================================

RULE 11 - fat is a width
  if:  hq-1 -lex-  fat
            -hq--> obj-1
then: ako-1 -lex-  width
            -ako-> hq-1

RULE 12 - a fatness is a width
  if: ako-1 -lex-  fatness
            -ako-> hq-1
then: ako-2 -lex-  width
            -ako-> hq-1

RULE 13 - a width is a fatness
  if: ako-1 -lex-  width
            -ako-> hq-1
then: ako-2 -lex-  fatness
            -ako-> hq-1

RULE 14 - if something is wide then it is fat
  if: hq-1 -lex-  wide
           -hq--> obj-1
then: hq-2 -lex-  fat
           -hq--> obj-1

RULE 15 - if something is not wide then it is not fat
  if: hq-1 -lex-  wide
           -neg-  1
           -hq--> obj-1
then: hq-2 -lex-  fat
           -neg-  1
           -hq--> obj-1

// ------------------------------------------------

RULE 16 - skinny is a width
  if:  hq-1 -lex-  skinny
            -hq--> obj-1
then: ako-1 -lex-  width
            -ako-> hq-1

RULE 17 - a skinniness is a width
  if: ako-1 -lex-  skinniness
            -ako-> hq-1
then: ako-2 -lex-  width
            -ako-> hq-1

RULE 18 - a width is a skinniness
  if: ako-1 -lex-  width
            -ako-> hq-1
then: ako-2 -lex-  skinniness
            -ako-> hq-1

RULE 19 - if something is narrow then it is skinny
  if: hq-1 -lex-  narrow
           -hq--> obj-1
then: hq-2 -lex-  skinny
           -hq--> obj-1

RULE 20 - if something is not narrow then it is not skinny
  if: hq-1 -lex-  narrow
           -neg-  1
           -hq--> obj-1
then: hq-2 -lex-  skinny
           -neg-  1
           -hq--> obj-1

// ================================================

RULE 21 - chunky is a thickness
  if:  hq-1 -lex-  chunky
            -hq--> obj-1
then: ako-1 -lex-  thickness
            -ako-> hq-1

RULE 22 - a chunkiness is a thickness
  if: ako-1 -lex-  chunkiness
            -ako-> hq-1
then: ako-2 -lex-  thickness
            -ako-> hq-1

RULE 23 - a thickness is a chunkiness
  if: ako-1 -lex-  thickness
            -ako-> hq-1
then: ako-2 -lex-  chunkiness
            -ako-> hq-1

RULE 24 - if something is thick then it is chunky
  if: hq-1 -lex-  thick
           -hq--> obj-1
then: hq-2 -lex-  chunky
           -hq--> obj-1

RULE 25 - if something is not thick then it is not chunky
  if: hq-1 -lex-  thick
           -neg-  1
           -hq--> obj-1
then: hq-2 -lex-  chunky
           -neg-  1
           -hq--> obj-1

// ================================================

RULE 26 - if something is left of something else then it is to the left of that thing
  if: loc-1 -lex-  left of
            -loc-> obj-1
            -wrt-> obj-2
then: loc-2 -lex-  to the left of
            -loc-> obj-1
            -wrt-> obj-2

RULE 27 - if something is not left of something else then it is not to the left of that thing
  if: loc-1 -lex-  left of
            -neg-  1
            -loc-> obj-1
            -wrt-> obj-2
then: loc-2 -lex-  to the left of
            -neg-  1
            -loc-> obj-1
            -wrt-> obj-2

RULE 28 - if something is right of something else then it is to the right of that thing
  if: loc-1 -lex-  right of
            -loc-> obj-1
            -wrt-> obj-2
then: loc-2 -lex-  to the right of
            -loc-> obj-1
            -wrt-> obj-2

RULE 29 - if something is not right of something else then it is not to the right of that thing
  if: loc-1 -lex-  right of
            -neg-  1
            -loc-> obj-1
            -wrt-> obj-2
then: loc-2 -lex-  to the right of
            -neg-  1
            -loc-> obj-1
            -wrt-> obj-2

// ================================================

RULE 30 - if something is next to something else then it is near that thing
  if: loc-1 -lex-  next to
            -loc-> obj-1
            -wrt-> obj-2
then: loc-2 -lex-  near
            -loc-> obj-1
            -wrt-> obj-2





