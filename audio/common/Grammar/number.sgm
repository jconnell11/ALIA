// number.sgm : accept only well-formed number

// ========================================================

// accept a number in spoken or written form
// will also accept some bad formations (overly permissive)
// mostly used to restrict the position of allowed "and"s
// typically used in conjuntion with class jhcParseNum 
//   "62.8M"
//   "a hundred"
//   "three million"
//   "three hundred and twenty three"
//   "nine hundred sixteen thousand" 
//   "three point one four one six"
//   "three hundred twelve point one two nine"

// --------------------------------------------------------

// Typical example: list of numbers (up to 6)

=[num-list]
  <^NUM> (and <^NUM> (and <^NUM> (and <^NUM> (and <^NUM> (and <^NUM>)))))


// get discrete values (could be $HI, $LO, or other application specific)
// dollar sign prefix makes capitalized category return covered string

=[^NUM]
  <number>


// ========================================================

// full formulation of integers and fractions

=[number]
  # (<num-chunk>)
  <num-int> (<num-pt> <num-seq> (<num-chunk>)) 


// decimal point indication

=[num-pt]
  point
  dot


// various chunk sizes

=[num-chunk]
  thousand
  K
  million
  M
  billion
  G
  B
  trillion
  T


// --------------------------------------------------------

// valid integer formations (allows embedded "and")
// does not enforce decreasing order on chunk sizes

=[num-int]
  <num-seq>
  <num-d4>
  a hundred ((and) <num-d2>)
  a <num-place> ((and) <num-d2>)
  <num-pod> (<num-pod> (<num-pod>)) <num-d4>
  <num-pod> (<num-pod> (<num-pod>)) ((and) <num-d2>)


// a string of 1 or 2 digit numerals

=[num-seq]
  <num-d2z> (<num-d2z> (<num-d2z> (<num-d2z> (<num-d2z> (<num-d2z>)))))


// a number and some chunk size

=[num-pod]
  <num-d4> <num-place>


// various place values for digit chunks

=[num-place]
  thousand
  million
  billion
  trillion


// --------------------------------------------------------

// up to 4 digit sequence (allows embedded "and")

=[num-d4]
  <num-d2>
  <num-d2> hundred ((and) <num-d2>)


// two digit sequence or zero

=[num-d2z]
  <num-zero>
  <num-d2>


// up to 2 digit sequence (e.g. 1, 13, 42)

=[num-d2]
  <num-d1>
  <num-teen>
  <num-x10> (<num-d1>) 


// --------------------------------------------------------

// various forms of zero

=[num-zero]
  zero
  oh
  ought


// single digits 1-9 (can compound with <num-x10>)

=[num-d1]
  one
  two
  three
  four
  five
  six
  seven
  eight
  nine


// numbers from 10-19

=[num-teen]
  ten
  eleven
  twelve
  thirteen
  fourteen
  fifteen
  sixteen
  seventeen
  eighteen
  nineteen


// multiples of 10

=[num-x10]
  twenty
  thirty
  forty 
  fifty
  sixty
  seventy
  eighty
  ninety
